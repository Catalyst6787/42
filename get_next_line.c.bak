/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   get_next_line.c                                    :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lfaure <marvin@42lausanne.ch>              +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/10/30 17:13:02 by lfaure            #+#    #+#             */
/*   Updated: 2024/11/04 14:44:27 by lfaure           ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "get_next_line.h"

char *check_stat(char *stat, int r)
{
	int	i;
	char *tmp;

	i = 0;
	while(stat[i])
	{
		if (stat[i] == '\n')
		{
			tmp = ft_strljoin("", stat, i + 1);
			stat = ft_substr(stat, i + 1, ft_strlen(stat) - i);
			if (r)
				return(tmp);
			else
				return(stat);
		}
		i++;
	}
	return(NULL);
}

char *get_next_line(int fd)
{
	unsigned int	i;
	static char 	*stat;
	char			*line;
	char			*tmp;
	char			buf[BUFFER_SIZE + 1];
	int				chars_read;

	if (fd < 0 || BUFFER_SIZE < 1)
		return(NULL);
	chars_read = 0;
	i = 0;
	if (!stat) {
    	stat = malloc(1);
    	stat[0] = '\0';
	} else {
    	char *tmp = check_stat(stat, 1);
    	if (tmp) {
        	free(stat); // Free old stat before overwriting
        	stat = check_stat(stat, 0);
        	return tmp; // Caller must free this
			}
	}
	/*
	if (!stat)
	{
		stat = malloc(1);
		stat[0] = '\0';
	}
	else if (((tmp = check_stat(stat, 1)) && ((stat = check_stat(stat, 0)))))
		return(tmp);
	*/
	line = malloc(1);
	line[0] = '\0';
	while((chars_read = read(fd, buf, BUFFER_SIZE)))
	{
		if (chars_read < 0)
			return(NULL);
		else if (chars_read == 0)
			return("");
		buf[chars_read] = '\0';
		tmp = ft_strljoin(stat, buf, BUFFER_SIZE + 1);
		while(tmp[i])
		{	
			if (tmp[i] == '\n')
			{
				line = ft_strljoin(line, tmp, i + 1);
				stat = ft_substr(tmp, i + 1, ft_strlen(tmp) - i + 1);
				return(line);
			}
			i++;
		}
		i = 0;
		line = ft_strljoin(line, tmp, BUFFER_SIZE + 1);
	}
	return(line);
}
/*
#include <stdio.h>
int main(void)
{
	int fd;

	fd = open("file.txt", O_RDONLY);
	printf("%s", get_next_line(fd));
	//printf("\n");
	printf("%s", get_next_line(fd));
	//printf("\n");
	printf("%s", get_next_line(fd));
	//printf("\n");
	printf("%s", get_next_line(fd));
	//printf("\n");
	printf("%s", get_next_line(fd));
	printf("%s", get_next_line(fd));
	printf("%s", get_next_line(fd));
}
*/
